1. Улучшенный instanceof

if (obj instanceof String str) {
    System.out.println(str.toLowerCase());
}


2. Порядок использования модификаторов в Java: public, abstract, static, final, volatile, synchronized
Используйте следующий порядок модификаторов

public / private / protected
abstract
static
final
transient
volatile
**default**
synchronized
native
strictfp

В соответствии с "Java Style Guidelines"
http://cr.openjdk.java.net/~alundblad/styleguide/index-v6.html#toc-modifiers

JAVA
// пример
public static volatile Integer someName;
public static final String name;


3. Большая задача: Пишем игру Тетрис
https://javarush.com/quests/lectures/questcollections.level02.lecture15


4. Пристальный взгляд на отладку JavaScript приложений
https://habr.com/ru/companies/kaspersky/articles/760922/

5. Автоматизация тестирования специфических сценариев
https://habr.com/ru/companies/gnivc/articles/764396/

6. Как мы построили свой лунапарк (с блекджеком, разумеется) или опыт внедрения системы управления ИТ-проектами
https://habr.com/ru/companies/nlmk/articles/764476/

7. Чтение на выходные: «Дао Toyota: 14 принципов менеджмента ведущей компании мира»
https://habr.com/ru/companies/onlinepatent/articles/764474/

8. Вы кто такие, я вас не знаю, или Как мы делаем JWT-аутентификацию

9. Настройка CI/CD для Gitlab-репозитория: схемы и гайд по шагам
https://habr.com/ru/articles/764568/

10. XML, Сериализация в XML
https://javarush.com/quests/lectures/questcollections.level03.lecture06
https://javarush.com/quests/lectures/questcollections.level03.lecture07
https://javarush.com/quests/lectures/questcollections.level03.lecture08
https://javarush.com/quests/lectures/questcollections.level03.lecture09
https://javarush.com/quests/lectures/questcollections.level03.lecture10

11. JSON
https://javarush.com/quests/lectures/questcollections.level03.lecture02

12. Инвертировать отображение карты в Java
https://www.techiedelight.com/ru/invert-mapping-map-java/

13. Основы JavaScript
https://ru.hexlet.io/courses/js-basics

JavaScript - Полный Курс JavaScript Для Начинающих [11 ЧАСОВ]
https://www.youtube.com/watch?v=CxgOKJh4zWE&ab_channel=BogdanStashchuk

Java Swing GUI
https://pro-java.ru/category/java-swing-gui/
https://pro-java.ru/gotovye-programmy-java/prostoj-kalkulyator-na-java/

WebSocket: Реализация web-приложения с использованием Jetty Web Socket. Часть 1
https://habr.com/ru/articles/128380/

WebSockets
https://javarush.com/quests/lectures/questspring.level05.lecture11

Использование WebSocket для создания интерактивных web-приложений
https://spring-projects.ru/guides/messaging-stomp-websocket/

Пишем чат с использованием Spring Boot и WebSockets
https://habr.com/ru/companies/otus/articles/516702/

Spring — это не страшно, или как стартовать WEB-сервер со Spring Boot за 5 минут
https://javarush.com/groups/posts/3092-spring-ehto-nestrashno

Thread'ом Java не испортишь: Часть I — потоки
https://javarush.com/groups/posts/2047-threadom-java-ne-isportishjh--chastjh-i---potoki

Как упростить себе жизнь: удобные юнит-тесты с JUnit и AssertJ
https://habr.com/ru/companies/skillbox/articles/767804/

Идентификация, аутентификация, авторизация: чем они различаются
https://skillbox.ru/media/code/identifikatsiya-autentifikatsiya-avtorizatsiya-chem-oni-razlichayutsya/
- Идентификация пользователя: подтверждение возможности доступа
  Идентификация — это процесс, когда информационная система, например социальная сеть или интернет-магазин, определяет,
  существует конкретный пользователь или нет. Делает она это с помощью идентификатора.
  Идентификатором может быть логин, электронная почта, номер телефона или другой признак,
  который есть только у одного пользователя. Идентификатор позволяет сайту или приложению отличить конкретного человека
  от других людей.
- Аутентификация: право на вход
  С идентификатором всё ясно. Но как сайт или приложение может проверить, имеет ли пользователь право войти в аккаунт?
  Здесь помогает аутентификация.
  Аутентификация — это процесс, когда пользователь вводит ключ, например пароль или пин-код,
  подтверждая своё право на доступ к той или иной учётной записи и хранящейся в ней информации.
  -- Аутентификация бывает одно-, двух- и трёхфакторной.
  --- Однофакторная аутентификация требует подтверждения только одним способом — например, с помощью пароля.
      Она встречается чаще всего.
  --- Двухфакторная аутентификация используется в системах, которые хранят важные или личные данные.
      Например, в банковских приложениях или в социальных сетях. При входе в соцсеть у пользователя могут попросить
      не только пароль, но и другую информацию — код из СМС или биометрические данные.
  --- В системах с повышенными требованиями к безопасности — например, в банковской сфере — встречается трёхфакторная
      аутентификация. Третьим фактором, позволяющим подтвердить личность, могут быть электронные ключи доступа.
      Электронный ключ хранится на специальном USB-накопителе и подключается в момент подтверждения доступа.
- Авторизация: проверка доступов и привилегий
  Авторизация — это процесс присвоения учётной записи положенных ей привилегий. Давайте рассмотрим её на нашем примере
  с личным кабинетом образовательной платформы Skillbox.
  Если авторизация прошла успешно, человек попадает в личный кабинет. Он может читать уведомления, видеть список
  доступных курсов, просматривать их и учиться. Права доступа к этим действиям называются привилегиями.
  Другая задача авторизации — защищать систему от изменений со стороны пользователей, которые не должны влиять на
  её работу. Например, в компаниях часто нельзя самостоятельно установить программное обеспечение на рабочий компьютер.
  Прав обычного пользователя для этого не хватит. Такими привилегиями обладает только системный администратор компании,
  который авторизуется под своим логином и может устанавливать дополнительный софт.


24.10.2023 ------------------------------------------------------------------------------------------------------------

MultiGameWebSocketClient extends WebSocketClient
Класс, являющийся наследником WebSocketClient, а значит он может быть клиентом WebSocket и подключаться к серверу.
MultiGameWebSocketClient введён для того, чтобы многовариантный игровой клиент мог взаимодействовать с сервером
многовариантного игрового сервера.
Сначала перечислю методы, унаследованные от WebSocketClient и нужные в реализации. Все они не сразу дают ответ:
- Конструктор( URI serverUri) - запоминает строку соединения и создаёт соединение.
  Сигнал о том, что соединение есть, будет через вызов метода onOpen.
- connect() - только создаёт соединение. Причём строка соединения уже должна быть в объекте (от конструктора).
- close() - закрывает соединение.
Абстрактные методы, которые необходимо реализовать в MultiGameWebSocketClient, как наследнику WebSocketClient:
- void onOpen( ServerHandshake handshakedata) - будет вызван при успешном установлении соединения с сервером.
  Например, после вызова конструктора или connect.
- void onMessage( String message) - будет вызван при получении строкового сообщения от сервера.
- void onClose( int code, String reason, boolean remote) - будет вызван при закрытии соединения.
- void onError( Exception ex) - будет вызван при возникновении ошибок. Если ошибка привела к разрыву
  websocket-соединения, то дополнительно будет вызван метод onClose(int, String, boolean).

Нужно создать несколько методов, которые могут быть вызваны при определённом состоянии клиента.
Они также не должны давать ответ сразу. Перечислены в формате "- Тип запроса - метод":
- REQ_CONNECT               - См. конструктор и connect()
- REQ_LOGIN                 - void login( String userName, String password)
/*
- REQ_LOGOUT                - void logout( )
*/
- REQ_GAME_TYPE_MAP         - void getGameTypeMap( )
- REQ_SELECT_GAME_TYPE      - void selectGameType( Class serverBaseModelClass) -
/*
- REQ_CREATE_GAME_SERIES    - void createGameSeries( )
- REQ_GAME_SERIES_MAP       - void getGameSeriesMap( )
- REQ_SELECT_GAME_SERIES    - void selectGameSeries( )
- REQ_GAME_MATCH_MAP        - void getGameMatchMap( )
- REQ_SELECT_GAME_MATCH     - void selectSelectGameMatch( )
- REQ_PLAYER_SIDE_MAP       - void getPlayerSideMap( )
- REQ_SELECT_PLAYER_SIDE    - void selectPlayerSide( )
- REQ_DECLARE_READINESS     - void declareReadiness( )
- REQ_READINESS_MAP         - void getReadinessMap( )
*/


- void onStart()
- void onOpen(WebSocket conn, ClientHandshake handshake)
- void onClose(WebSocket conn, int code, String reason, boolean remote)
- void onMessage(WebSocket conn, String message)
- void onError(WebSocket conn, Exception ex)


У сервера многовариантных игровых моделей будет свой перечень методов для отправки сообщений клиенту.
Позже опишу... Здесь пока приведу перечень типов сообщений сервера
- INFO_CONNECT              -   См. onOpen
- INFO_LOGIN                -   void infoLogin() {}
/*
- INFO_LOGOUT               -   void infoLogout() {}
*/
- INFO_GAME_TYPE_MAP        -   void infoGameTypeMap( Map< ServerBaseModel, String> mapOfServerBaseModel_String) {}
- INFO_SELECT_GAME_TYPE     -   void infoSelectGameType( Class clazz) {}
/*
- INFO_CREATE_GAME_SERIES   -   void infoCreateGameSeries() {}
- INFO_GAME_SERIES_MAP      -   void infoGameSeriesMap() {}
- INFO_GAME_MATCH_MAP       -   void infoGameMatchMap() {}
- INFO_SELECT_GAME_MATCH    -   void infoSelectGameMatch() {}
- INFO_PLAYER_SIDE_MAP      -   void infoPlayerSideMap() {}
- INFO_SELECT_PLAYER_SIDE   -   void infoSelectPlayerSide() {}
- INFO_DECLARE_READINESS    -   void infoDeclareReadiness() {}
- INFO_READINESS_MAP        -   void infoReadinessMap() {}
- INFO_START_GAME_MATCH     -   void infoStartGameMatch() {}
*/
При отправке сервером клиенту сообщений у клиента будет срабатывать onMessage.

Создать интерфейсы и реализацию методов в классах, которые могут быть вызваны при поступлении различного типа сообщений
от сервера.

MultiGameWebSocketClient
- void onMessage( String message)
  В зависимости от:
  - типа присланного сообщения,
  - различного типа дополнительных данных, характерных для типа сообщений,
  - (но и при желательном контроле состояния соединения клиента),
  Можно либо:
  - в MultiGameWebSocketClient запомнить, что пришло и вызвать
