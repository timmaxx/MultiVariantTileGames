package timmax.minesweeper.jfx.view;

import javafx.scene.paint.Color;
import timmax.basetilemodel.*;
import timmax.basetilemodel.gameevent.*;
import timmax.minesweeper.model.gameevent.*;
import timmax.tilegameenginejfx.*;
import java.util.NoSuchElementException;

import static javafx.scene.paint.Color.*;

public class MinesweeperMainFieldViewJfx extends ViewJfx {
    private static final Color UNOPENED_CELL_COLOR = ORANGE;
    private static final Color OPENED_CELL_COLOR = GREEN;

    private static final String FLAG = "üö©"; // "\uD83D\uDEA9";
    private static final Color FLAG_CELL_COLOR = YELLOW;

    private static final String MINE = "üí£"; // "\uD83D\uDCA3";
    private static final Color MINE_CELL_COLOR = RED;

    private final boolean showGrid = true;
    private final boolean showCoordinates = false;


    public MinesweeperMainFieldViewJfx( BaseModel baseModel) {
        super( baseModel);
    }

    // –ü–æ—á—Ç–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ —Å –æ–¥–Ω–æ–∏–º–µ–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º –≤ SokobanMainFieldViewJfx.
    // ToDo:
    //  1. –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å.
    //  2. –ò —Ç–∞–º —á–µ—Ä–µ–∑ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—é —Ä–∞–∑—Ä—É–ª–∏—Ç—å –Ω–µ–æ–¥–∏–Ω–∞–∫–æ–≤–æ—Å—Ç—å.
    @Override
    public void update( ) {
        GameEvent gameEvent;
        while ( true) {
            try {
                // –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –º–æ–¥–µ–ª–∏ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å.
                // –ò–ª–∏ –¥–∞–∂–µ –Ω–µ –∫ –º–æ–¥–µ–ª–∏, –∞ –∫ –æ—á–µ—Ä–µ–¥–∏, –∫–æ—Ç–æ—Ä–∞—è –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–µ–ª–∏, –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—é.
                gameEvent = baseModel.getNextGameEventForView( this);
            } catch ( NoSuchElementException nsee) {
                break;
            }

            if ( gameEvent instanceof GameEventNewGame) {
                initMainField( ( GameEventNewGame) gameEvent);
            } else if ( gameEvent instanceof GameEventOneTile) {
                drawTile( ( ( GameEventOneTile) gameEvent));
            }
        }
    }

    private void initMainField( GameEventNewGame gameEventNewGame) {
        // ToDo: –°–≤–æ–π—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏ –Ω—É–∂–Ω–æ –±—Ä–∞—Ç—å –Ω–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –º–æ–¥–µ–ª–∏, –∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è!
        int width = gameEventNewGame.getWidth( );
        int height = gameEventNewGame.getHeight( );
        cellSize = Math.min( Game.APP_WIDTH / width, Game.APP_HEIGHT / height);

        primaryStage.hide( );
        root.setPrefSize(
                width * cellSize + GameBorderImage.getPaddingSide( ) + GameBorderImage.getPaddingSide( ),
                height * cellSize + GameBorderImage.getPaddingTop( ) + GameBorderImage.getPaddingDown( )
        );

        cells = new GameStackPane[ height][ width];
        for( int y = 0; y < height; ++y) {
            for( int x = 0; x < width; ++x) {
                cells[ y][ x] = new GameStackPane( x, y, cellSize, showGrid, showCoordinates);
                {   // –ù–∞–ª–∏—á–∏–µ–º —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–¥–Ω–æ–∏–º–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ SokobanMainFieldViewJfx
                    // ToDo:
                    //  1. –°–¥–µ–ª–∞—Ç—å initMainField –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–ª–∞—Å—Å–µ —Å –≤—ã–∑–æ–≤–æ–º –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ (–ø. 2).
                    //  2. –°–¥–µ–ª–∞—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Ç–∞–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–æ–±–Ω–æ–≥–æ –±–ª–æ–∫–∞.
                    //  3. –í —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥.
                    cells[ y][ x].setCellValue( "", cellSize);
                    cells[ y][ x].setCellColor( UNOPENED_CELL_COLOR);
                }
                root.getChildren( ).add( cells[ y][ x]);
            }
        }
        primaryStage.show( );
    }

    // ToDo: drawTile –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å –∏ –ø—É—Å—Ç—å —Ç–∞–º –±—É–¥–µ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–π. –ê –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è.
    private void drawTile( GameEventOneTile gameEventOneTile) {
        int x = gameEventOneTile.getX( );
        int y = gameEventOneTile.getY( );
        GameStackPane cell = cells[ y][ x];

        if ( gameEventOneTile instanceof GameEventOneTileOpenMine) {
            cell.setCellValueEx( MINE_CELL_COLOR, MINE, cellSize);
        } else if ( gameEventOneTile instanceof GameEventOneTileOpenNoMine) {
            int countOfMineNeighbors = ( (GameEventOneTileOpenNoMine) gameEventOneTile).getCountOfMineNeighbors( );
            cell.setCellNumber( countOfMineNeighbors, cellSize);
            cell.setCellColor( OPENED_CELL_COLOR);
        } else if ( gameEventOneTile instanceof GameEventOneTileChangeFlag) {
            String flag;
            Color tile_cell_color;
            if ( ( ( GameEventOneTileChangeFlag) gameEventOneTile).isFlag( )) {
                flag = FLAG;
                tile_cell_color = FLAG_CELL_COLOR;
            } else {
                flag = "";
                tile_cell_color = UNOPENED_CELL_COLOR;
            }
            cell.setCellValue( flag, cellSize);
            cell.setCellColor( tile_cell_color);
        }
    }
}