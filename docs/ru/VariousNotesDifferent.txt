1. Улучшенный instanceof

if (obj instanceof String str) {
    System.out.println(str.toLowerCase());
}


2. Порядок использования модификаторов в Java: public, abstract, static, final, volatile, synchronized
Используйте следующий порядок модификаторов

public / private / protected
abstract
static
final
transient
volatile
**default**
synchronized
native
strictfp

В соответствии с "Java Style Guidelines"
http://cr.openjdk.java.net/~alundblad/styleguide/index-v6.html#toc-modifiers

JAVA
// пример
public static volatile Integer someName;
public static final String name;


3. Большая задача: Пишем игру Тетрис
https://javarush.com/quests/lectures/questcollections.level02.lecture15

4. Пристальный взгляд на отладку JavaScript приложений
https://habr.com/ru/companies/kaspersky/articles/760922/

5. Автоматизация тестирования специфических сценариев
https://habr.com/ru/companies/gnivc/articles/764396/

6. Как мы построили свой лунапарк (с блекджеком, разумеется) или опыт внедрения системы управления ИТ-проектами
https://habr.com/ru/companies/nlmk/articles/764476/

7. Чтение на выходные: «Дао Toyota: 14 принципов менеджмента ведущей компании мира»
https://habr.com/ru/companies/onlinepatent/articles/764474/

8. Вы кто такие, я вас не знаю, или Как мы делаем JWT-аутентификацию

9. Настройка CI/CD для Gitlab-репозитория: схемы и гайд по шагам
https://habr.com/ru/articles/764568/

10. XML, Сериализация в XML
https://javarush.com/quests/lectures/questcollections.level03.lecture06
https://javarush.com/quests/lectures/questcollections.level03.lecture07
https://javarush.com/quests/lectures/questcollections.level03.lecture08
https://javarush.com/quests/lectures/questcollections.level03.lecture09
https://javarush.com/quests/lectures/questcollections.level03.lecture10

11. JSON
https://javarush.com/quests/lectures/questcollections.level03.lecture02

12. Инвертировать отображение карты в Java
https://www.techiedelight.com/ru/invert-mapping-map-java/

13. Основы JavaScript
https://ru.hexlet.io/courses/js-basics

JavaScript - Полный Курс JavaScript Для Начинающих [11 ЧАСОВ]
https://www.youtube.com/watch?v=CxgOKJh4zWE&ab_channel=BogdanStashchuk

Java Swing GUI
https://pro-java.ru/category/java-swing-gui/
https://pro-java.ru/gotovye-programmy-java/prostoj-kalkulyator-na-java/

WebSocket: Реализация web-приложения с использованием Jetty Web Socket. Часть 1
https://habr.com/ru/articles/128380/

WebSockets
https://javarush.com/quests/lectures/questspring.level05.lecture11

Использование WebSocket для создания интерактивных web-приложений
https://spring-projects.ru/guides/messaging-stomp-websocket/

Пишем чат с использованием Spring Boot и WebSockets
https://habr.com/ru/companies/otus/articles/516702/

Spring — это не страшно, или как стартовать WEB-сервер со Spring Boot за 5 минут
https://javarush.com/groups/posts/3092-spring-ehto-nestrashno

Thread'ом Java не испортишь: Часть I — потоки
https://javarush.com/groups/posts/2047-threadom-java-ne-isportishjh--chastjh-i---potoki

Как упростить себе жизнь: удобные юнит-тесты с JUnit и AssertJ
https://habr.com/ru/companies/skillbox/articles/767804/

Идентификация, аутентификация, авторизация: чем они различаются
https://skillbox.ru/media/code/identifikatsiya-autentifikatsiya-avtorizatsiya-chem-oni-razlichayutsya/
- Идентификация пользователя: подтверждение возможности доступа
  Идентификация — это процесс, когда информационная система, например социальная сеть или интернет-магазин, определяет,
  существует конкретный пользователь или нет. Делает она это с помощью идентификатора.
  Идентификатором может быть логин, электронная почта, номер телефона или другой признак,
  который есть только у одного пользователя. Идентификатор позволяет сайту или приложению отличить конкретного человека
  от других людей.
- Аутентификация: право на вход
  С идентификатором всё ясно. Но как сайт или приложение может проверить, имеет ли пользователь право войти в аккаунт?
  Здесь помогает аутентификация.
  Аутентификация — это процесс, когда пользователь вводит ключ, например пароль или пин-код,
  подтверждая своё право на доступ к той или иной учётной записи и хранящейся в ней информации.
  -- Аутентификация бывает одно-, двух- и трёхфакторной.
  --- Однофакторная аутентификация требует подтверждения только одним способом — например, с помощью пароля.
      Она встречается чаще всего.
  --- Двухфакторная аутентификация используется в системах, которые хранят важные или личные данные.
      Например, в банковских приложениях или в социальных сетях. При входе в соцсеть у пользователя могут попросить
      не только пароль, но и другую информацию — код из СМС или биометрические данные.
  --- В системах с повышенными требованиями к безопасности — например, в банковской сфере — встречается трёхфакторная
      аутентификация. Третьим фактором, позволяющим подтвердить личность, могут быть электронные ключи доступа.
      Электронный ключ хранится на специальном USB-накопителе и подключается в момент подтверждения доступа.
- Авторизация: проверка доступов и привилегий
  Авторизация — это процесс присвоения учётной записи положенных ей привилегий. Давайте рассмотрим её на нашем примере
  с личным кабинетом образовательной платформы Skillbox.
  Если авторизация прошла успешно, человек попадает в личный кабинет. Он может читать уведомления, видеть список
  доступных курсов, просматривать их и учиться. Права доступа к этим действиям называются привилегиями.
  Другая задача авторизации — защищать систему от изменений со стороны пользователей, которые не должны влиять на
  её работу. Например, в компаниях часто нельзя самостоятельно установить программное обеспечение на рабочий компьютер.
  Прав обычного пользователя для этого не хватит. Такими привилегиями обладает только системный администратор компании,
  который авторизуется под своим логином и может устанавливать дополнительный софт.

Автоформатирование однострочных методов в intelij idea
https://ru.stackoverflow.com/questions/713089/%d0%90%d0%b2%d1%82%d0%be%d1%84%d0%be%d1%80%d0%bc%d0%b0%d1%82%d0%b8%d1%80%d0%be%d0%b2%d0%b0%d0%bd%d0%b8%d0%b5-%d0%be%d0%b4%d0%bd%d0%be%d1%81%d1%82%d1%80%d0%be%d1%87%d0%bd%d1%8b%d1%85-%d0%bc%d0%b5%d1%82%d0%be%d0%b4%d0%be%d0%b2-%d0%b2-intelij-idea?rq=1
В редакторе видим:
public void method(Object parameter) { doSomething(parameter) }
Но если хочется в несколько строк:
public void method(Object parameter) {
    doSomething(parameter)
}
То: File - Settings - "code folding" - Java - One-line methods

Настройки шаблонов стиля кода по умолчанию для пробелов внутри скобок:
File - Settings - Editor - Code style - Java - Spaces - Within
Если их все в этом блоке выставить, то любое выражение в любых скобках будет:
- с пробелом после открывающей скобки, (мне это и хотелось)
- с пробелом перед закрывающей скобкой. (а вот это мне не хотелось)

Коллекции в Java: о чём многие забывают
https://habr.com/ru/articles/267389/
- EnumSet и EnumMap
  До сих пор встречается код, где значения типа enum используют в качестве ключей в HashSet и HashMap.
  Хотя это работает, но оно неоправданно расточительно.
  Существующие специальные классы EnumSet и EnumMap значительно производительнее.


12.11.2023 ------------------------------------------------------------------------------------------------------------

Double brace инициализация (это антипаттерн)
https://javarush.com/groups/posts/1457-double-brace-inicializacija


23.11.2023 ------------------------------------------------------------------------------------------------------------

How to write a good README for your GitHub project?
https://bulldogjob.com/readme/how-to-write-a-good-readme-for-your-github-project

README генератор
https://readme.so/ru

Генератор .gitignore
.gitignore - https://www.toptal.com/developers/gitignore/

Git Command - генератор синтаксиса
https://gitexplorer.com/

Git comments
https://www.git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#_commit_guidelines
https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html
https://who-t.blogspot.com/2009/12/on-commit-messages.html
https://github.com/erlang/otp/wiki/writing-good-commit-messages

Обратить внимание на
package org.springframework.dao.support;
public abstract class DataAccessUtils {
	public static <T> T singleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException
	public static <T> T requiredSingleResult(@Nullable Collection<T> results) throws IncorrectResultSizeDataAccessException
...
}

package org.springframework.lang;
public @interface Nullable {
}

package org.springframework.lang;
public @interface NonNull {
}
