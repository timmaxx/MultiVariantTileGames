package timmax.tilegame.sokoban.model;

import java.net.URISyntaxException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import javafx.scene.paint.Color;

import timmax.tilegame.basemodel.gamecommand.GameCommandKeyPressed;
import timmax.tilegame.basemodel.gamecommand.GameCommandMouseClick;
import timmax.tilegame.basemodel.gameevent.GameEventGameOver;
import timmax.tilegame.basemodel.gameevent.GameEventOneTile;
import timmax.tilegame.basemodel.placement.primitives.XYCoordinate;
import timmax.tilegame.sokoban.model.placement.placementstate.SokobanPlacementStateAutomaton;
import timmax.tilegame.basemodel.protocol.server.GameMatch;
import timmax.tilegame.basemodel.protocol.server.RemoteClientStateAutomaton;
import timmax.tilegame.basemodel.dto.GameMatchExtendedDto;

import timmax.tilegame.sokoban.model.gameevent.GameEventOneTileSokobanChangeable;
import timmax.tilegame.sokoban.model.placement.gameobject.WhoMovableInTile;
import timmax.tilegame.sokoban.model.placement.gameobject.WhoPersistentInTile;

import static javafx.scene.input.KeyCode.*;
import static javafx.scene.input.MouseButton.PRIMARY;
import static javafx.scene.paint.Color.*;
import static timmax.tilegame.basemodel.GameMatchStatus.FORCE_RESTART_OR_CHANGE_LEVEL;
import static timmax.tilegame.sokoban.model.placement.gameobject.WhoMovableInTile.IS_NOBODY;
import static timmax.tilegame.sokoban.model.placement.gameobject.WhoPersistentInTile.IS_EMPTY;

public class GameMatchOfSokoban extends GameMatch {
    //  1.  String constants
    //      –ù–µ—Ç.

    //  2.  static pathToLevels
    private static final Path pathToLevels;

    //  3.  –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    private final CurrentLevel currentLevel = new CurrentLevel();
    // private Route route;
    // private Route routeRedo = new Route();

    //  4.  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä pathToLevels
    static {
        try {
            pathToLevels = Paths.get(Objects
                    .requireNonNull(GameMatchOfSokoban.class.getResource("levels.txt"))
                    .toURI()
            );
        } catch (URISyntaxException uriSE) {
            logger.error("There is a problem with file with game levels.", uriSE);
            //  ToDo:   –ü—Ä–∏ 'System.exit(1);' —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä–æ–µ—Ç—Å—è.
            //          –ù–æ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ–ª–∏ –æ–¥–Ω–æ–π –∏–≥—Ä—ã.
            //          –ü–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã —Ç–æ–ª—å–∫–æ —ç—Ç–∞ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
            //          –∏ –∫–ª–∏–µ–Ω—Ç—É –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–µ—Ä–µ—á–µ–Ω—å –∏–≥—Ä –±–µ–∑ —ç—Ç–æ–π –∏–≥—Ä—ã.
            System.exit(1);

            throw new RuntimeException(uriSE);
        }
    }

    //  ToDo:   –£–¥–∞–ª–∏—Ç—å –æ—Ç—Å—é–¥–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã, –æ–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ, —Ç.–∫. –æ–Ω–∏ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.
    public static final Color WALL_BACKGROUND_COLOR = RED;
    public static final Color HOME_BACKGROUND_COLOR = WHITE;
    public static final Color EMPTY_BACKGROUND_COLOR = BLACK;

    public static final String NOBODY_TEXT = "";
    public static final Color NOBODY_TEXT_COLOR = BLACK;

    public static final String PLAYER_TEXT = "üòÄ"; // "\uF9CD"; // "&";
    public static final Color PLAYER_TEXT_COLOR = GREEN;

    public static final String BOX_TEXT = "‚ñà"; // "‚ùê"; // "‚ñâ"; // "[]";
    public static final Color BOX_TEXT_COLOR = BLUE;

    // ToDo: –°–º. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤
    //       - GameType :: GameType(...)
    //       –∏ –≤
    //       - GameMatchLoader :: getCollectionOfGameType(...)
    public GameMatchOfSokoban(RemoteClientStateAutomaton remoteClientStateAutomaton)
            throws ClassNotFoundException, NoSuchMethodException {
        super(new GameTypeOfSokoban(), remoteClientStateAutomaton);
        super.setPlayer(0, remoteClientStateAutomaton.getUser());
    }

    public void nextLevel() {
        if (verifyGameStatusNotGameAndMayBeCreateNewGame()) {
            return;
        }
        setStatus(FORCE_RESTART_OR_CHANGE_LEVEL);
        currentLevel.incValue();
        //  ToDo:   –í–º–µ—Å—Ç–æ
        //          getRemoteClientStateAutomaton().getSenderOfEventOfServer()
        //          —Å–¥–µ–ª–∞—Ç—å getSenderOfEventOfServer(), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —Å—Ä–∞–∑—É –∏–∑ —Å–≤–æ–π—Å—Ç–≤ —Å–µ—Ä–≤–µ—Ä–∞.
        getRemoteClientStateAutomaton().getSenderOfEventOfServer().sendGameEventToAllViews(
                getRemoteClientStateAutomaton().getGameMatchX().getMatchPlayerList(),
                new GameEventGameOver(FORCE_RESTART_OR_CHANGE_LEVEL),
                getGameType().getViewName_ViewClassMap()
        );
    }

    public void prevLevel() {
        if (verifyGameStatusNotGameAndMayBeCreateNewGame()) {
            return;
        }
        setStatus(FORCE_RESTART_OR_CHANGE_LEVEL);
        currentLevel.decValue();
        //  ToDo:   –í–º–µ—Å—Ç–æ
        //          getRemoteClientStateAutomaton().getSenderOfEventOfServer()
        //          —Å–¥–µ–ª–∞—Ç—å getSenderOfEventOfServer(), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —Å—Ä–∞–∑—É –∏–∑ —Å–≤–æ–π—Å—Ç–≤ —Å–µ—Ä–≤–µ—Ä–∞.
        getRemoteClientStateAutomaton().getSenderOfEventOfServer().sendGameEventToAllViews(
                getRemoteClientStateAutomaton().getGameMatchX().getMatchPlayerList(),
                new GameEventGameOver(FORCE_RESTART_OR_CHANGE_LEVEL),
                //  Warning:(92, 17) Unchecked assignment: 'java.util.Map' to 'java.util.Map<java.lang.String,java.lang.Class<? extends timmax.tilegame.baseview.View>>'. Reason: 'getGameType()' has raw type, so result of getViewName_ViewClassMap is erased
                getGameType().getViewName_ViewClassMap()
        );
    }

    // interface IGameMatchX
    @Override
    public void start(GameMatchExtendedDto gameMatchExtendedDto) {
        // ToDo: –ß—Ç–æ-—Ç–æ –∏–∑ –æ–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –Ω–∏–∂–µ ToDo —Å–¥–µ–ª–∞—Ç—å –∑–¥–µ—Å—å, —á—Ç–æ-—Ç–æ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–ª–∞—Å—Å–µ.
        // ToDo: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É:
        //       1. –†–∞–∑–º–µ—Ä—ã –≥–ª–∞–≤–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏ –º–∞—Ç—á–∞ –∏ —É–º–æ–ª—á–∞—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ –ø–æ–ª—è
        //          (–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –≤ –±–æ–ª–µ–µ —Ä–∞–Ω–Ω–µ–º —Å–æ–±—ã—Ç–∏–∏ —Å–ª–µ–¥—É–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å) –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—É—Å—Ç–æ–π –≤—ã–±–æ—Ä–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ–ª—è.
        //       2. –û–±—ä–µ–∫—Ç—ã –º–∞—Ç—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä –¥–ª—è –°–æ–∫–æ–±–∞–Ω: —Å—Ç–µ–Ω—ã –∏–ª–∏ –¥–æ–º–∞).
        //       3. –û–±—ä–µ–∫—Ç—ã –º–∞—Ç—á–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä:
        //          - –¥–ª—è –°–æ–∫–æ–±–∞–Ω: –∏–≥—Ä–æ–∫, —è—â–∏–∫–∏.

        super.start(gameMatchExtendedDto);

        // 1. setGameObjectsPlacement(levelLoader.getLevel())
        // 2. setParamsOfModelValueMap()
        // 3. –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ—á–Ω—è —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É –¥–ª—è –ø—Ä–æ—Ä–∏—Å–æ–≤–∫–∏ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏.

        // –í —ç—Ç–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –°–æ–∫–æ–±–∞–Ω –Ω–µ –æ–±—Ä–∞—â–∞–µ–º –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ gameMatchExtendedDto - –ø—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å.
        setGameObjectsPlacementStateAutomaton(
                new SokobanPlacementStateAutomaton(
                        this, pathToLevels, currentLevel.getValue()
                )
        );
        setParamsOfModelValueMap(
                Map.of(PARAM_NAME_WIDTH,
                        getGameObjectsPlacementStateAutomaton().getWidthHeightSizes().getWidth(),
                        PARAM_NAME_HEIGHT,
                        getGameObjectsPlacementStateAutomaton().getWidthHeightSizes().getHeight()
                )
        );

        Set<GameEventOneTile> gameEventOneTileSet = new HashSet<>();

        for (int y = 0; y < getGameObjectsPlacementStateAutomaton().getWidthHeightSizes().getHeight(); y++) {
            for (int x = 0; x < getGameObjectsPlacementStateAutomaton().getWidthHeightSizes().getWidth(); x++) {
                XYCoordinate xyCoordinate = new XYCoordinate(x, y);
                WhoPersistentInTile whoPersistentInTile = getGameObjectsPlacementStateAutomaton().getWhoPersistentInTile(xyCoordinate);
                WhoMovableInTile whoMovableInTile = getGameObjectsPlacementStateAutomaton().getWhoMovableInTile(xyCoordinate);
                // –≠—Ç–æ —á—Ç–æ–±—ã –º–µ–Ω—å—à–µ –±—ã–ª–æ —Å–æ–±—ã—Ç–∏–π - –ø—Ä–æ –ø—É—Å—Ç—ã–µ –ø–ª–∏—Ç–∫–∏ –Ω–µ –¥–µ–ª–∞–µ–º —Å–æ–±—ã—Ç–∏—è.
                if (whoPersistentInTile == IS_EMPTY && whoMovableInTile == IS_NOBODY) {
                    continue;
                }
                GameEventOneTile gameEventOneTile = new GameEventOneTileSokobanChangeable(xyCoordinate, whoPersistentInTile, whoMovableInTile);
                gameEventOneTileSet.add(gameEventOneTile);
            }
        }
        // route = new Route();
        // routeRedo = new Route();

        setGameMatchExtendedDto(newGameMatchExtendedDto(gameEventOneTileSet));
    }

    // interface IGameMatch
    @Override
    public void executeMouseCommand(GameCommandMouseClick gameCommandMouseClick) {
        if (gameCommandMouseClick.getMouseButton() == PRIMARY) {
            XYCoordinate xyCoordinateOfMouseClick = gameCommandMouseClick.getXYCoordinate();
            getGameObjectsPlacementStateAutomaton().movePlayerToMouseClick(xyCoordinateOfMouseClick);
        }/* else if (gameCommandMouseClick.getMouseButton() == MouseButton.SECONDARY) {
            moveUndo();
        } else if (gameCommandMouseClick.getMouseButton() == MouseButton.MIDDLE) {
            moveRedo();
        }*/
    }

    @Override
    public void executeKeyboardCommand(GameCommandKeyPressed gameCommandKeyPressed) {
        getGameObjectsPlacementStateAutomaton().movePlayerByKeyCode(gameCommandKeyPressed.getKeyCode());
        /* if (gameCommandKeyPressed.getKeyCode() == KeyCode.Q) {
            moveUndo();
        } else if (gameCommandKeyPressed.getKeyCode() == KeyCode.P) {
            moveRedo();
        } else*/
        if (gameCommandKeyPressed.getKeyCode() == BACK_SPACE) {
            prevLevel();
        } else if (gameCommandKeyPressed.getKeyCode() == SPACE) {
            nextLevel();
        } else if (gameCommandKeyPressed.getKeyCode() == ESCAPE) {
            restart();
        }
    }

    @Override
    public void win() {
        currentLevel.incValue();
        super.win();
    }

    @Override
    protected SokobanPlacementStateAutomaton getGameObjectsPlacementStateAutomaton() {
        return (SokobanPlacementStateAutomaton) super.getGameObjectsPlacementStateAutomaton();
    }
}
