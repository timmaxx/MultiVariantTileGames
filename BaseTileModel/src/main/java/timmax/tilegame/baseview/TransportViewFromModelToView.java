package timmax.tilegame.baseview;

import timmax.tilegame.basemodel.GameQueueForOneView;
import timmax.tilegame.basemodel.gameevent.GameEvent;

public interface TransportViewFromModelToView {
    // 3. В: приём по сети сообщений в выборке,
    void receive( GameEvent gameEvent);

    // 5. В: известить модель (дать отклик), что сообщение получено
    void sendFeedback( GameQueueForOneView gameQueueForOneView);
}

/*
07.10.2023 ------------------------------------------------------------------------------------------------------------

Архитектура
BaseModel
- Сейчас в BaseModel в исходящую очередь добавляются сообщения, а при вызове notify вызываются update, каждой
  присоединённой view. Такое подходит, когда модель и выборка в одном исполняемом коде.
  Для сетевого взаимодействия нужно разделить функционал на:
-- 1. М: внесению сообщений от модели в очередь модели,
-- 2. М: передача по сети сообщений из очереди модели,
-- 3. В: приём по сети сообщений в выборке,
-- 4. В: внесение в очередь входящих сообщений на стороне выборки,
-- 5. В: известить модель (дать отклик), что сообщение получено,
-- 6. М: если модель получила отклик, что сообщение получено выборкой, то удалить его из своей очереди,
-- 7. В: вызов update на стороне выборки,
-- 8. В: удаление сообщения из очереди выборки.
*/