package timmax.sokoban.jfx.view;

import timmax.basetilemodel.*;
import timmax.basetilemodel.gameevent.*;
import timmax.sokoban.model.gameevent.*;
import timmax.sokoban.model.gameobject.*;

import javafx.scene.paint.Color;
import timmax.tilegameenginejfx.*;

import java.util.NoSuchElementException;

import static javafx.scene.paint.Color.*;
import static timmax.sokoban.model.gameobject.WhoMovableInTile.*;
import static timmax.sokoban.model.gameobject.WhoPersistentInTile.*;

public class SokobanMainFieldViewJfx extends ViewJfx {
    private static final Color WALL_CELL_COLOR = RED;
    private static final Color HOME_CELL_COLOR = WHITE;
    private static final Color EMPTY_CELL_COLOR = BLACK;

    private static final String PLAYER = "üòÄ"; // "\uF9CD"; // "&";
    private static final Color PLAYER_TEXT_COLOR = GREEN;

    private static final String BOX = "‚ñà"; // "‚ùê"; // "‚ñâ"; // "[]";
    private static final Color BOX_TEXT_COLOR = BLUE;


    public SokobanMainFieldViewJfx( BaseModel baseModel) {
        super( baseModel);
    }

    // –ü–æ—á—Ç–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ —Å –æ–¥–Ω–æ–∏–º–µ–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º –≤ MinesweeperMainFieldViewJfx.
    // ToDo:
    //  1. –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å.
    //  2. –ò —Ç–∞–º —á–µ—Ä–µ–∑ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—é —Ä–∞–∑—Ä—É–ª–∏—Ç—å –Ω–µ–æ–¥–∏–Ω–∞–∫–æ–≤–æ—Å—Ç—å.
    @Override
    public void update( ) {
        while ( true) {
            GameEvent gameEvent;
            try {
                // –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –º–æ–¥–µ–ª–∏ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å.
                // –ò–ª–∏ –¥–∞–∂–µ –Ω–µ –∫ –º–æ–¥–µ–ª–∏, –∞ –∫ –æ—á–µ—Ä–µ–¥–∏, –∫–æ—Ç–æ—Ä–∞—è –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–µ–ª–∏, –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—é.
                gameEvent = baseModel.getNextGameEventForView( this);
            } catch ( NoSuchElementException nsee) {
                break;
            }

            if ( gameEvent instanceof GameEventNewGame) {
                initMainField( ( GameEventNewGame) gameEvent);
            } else if ( gameEvent instanceof GameEventOneTileSokobanChangeable) {
                drawTile( ( ( GameEventOneTileSokobanChangeable) gameEvent));
            }
        }
    }

    private void initMainField( GameEventNewGame gameEventNewGame) {
        int width = gameEventNewGame.getWidth( );
        int height = gameEventNewGame.getHeight( );
        cellSize = Math.min( Game.APP_WIDTH / width, Game.APP_HEIGHT / height);

        primaryStage.hide( );
        root.setPrefSize(
                width * cellSize + GameBorderImage.getPaddingSide( ) + GameBorderImage.getPaddingSide( ),
                height * cellSize + GameBorderImage.getPaddingTop( ) + GameBorderImage.getPaddingDown( )
        );

        cells = new GameStackPane[ height][ width];

        for( int y = 0; y < height; ++y) {
            cells[ y] = new GameStackPane[ baseModel.getWidth( )];
            for( int x = 0; x < width; ++x) {
                cells[ y][ x] = new GameStackPane( x, y, cellSize, true, false);
                {
                    // –°–º. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –æ–¥–Ω–æ–∏–º–µ–Ω–Ω–æ–º—É –º–µ—Ç–æ–¥—É –≤ –∫–ª–∞—Å—Å–µ MinesweeperMainFieldViewJfx
                }
                root.getChildren( ).add( cells[ y][ x]);
            }
        }
        primaryStage.show( );
    }

    // ToDo: drawTile –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å –∏ –ø—É—Å—Ç—å —Ç–∞–º –±—É–¥–µ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–π. –ê –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è.
    private void drawTile( GameEventOneTileSokobanChangeable gameEventOneTileSokobanChangeable) {
        int x = gameEventOneTileSokobanChangeable.getX( );
        int y = gameEventOneTileSokobanChangeable.getY( );
        GameStackPane cell = cells[ y][ x];

        WhoPersistentInTile whoPersistentInTile = gameEventOneTileSokobanChangeable.getWhoPersistentInTile( );
        if ( whoPersistentInTile == IS_WALL) {
            cell.setCellColor( WALL_CELL_COLOR);
        } else if ( whoPersistentInTile == IS_HOME) {
            cell.setCellColor( HOME_CELL_COLOR);
        } else { // IS_EMPTY
            cell.setCellColor( EMPTY_CELL_COLOR);
        }

        WhoMovableInTile whoMovableInTile = gameEventOneTileSokobanChangeable.getWhoMovableInTile( );
        if ( whoMovableInTile == IS_PLAYER) {
            cell.setCellValue( PLAYER, cellSize);
            cell.setCellTextColor( PLAYER_TEXT_COLOR);
        } else if ( whoMovableInTile == IS_BOX) {
            cell.setCellValue( BOX, cellSize);
            cell.setCellTextColor( BOX_TEXT_COLOR);
        } else { // IS_NOBODY
            cell.setCellValue( "", cellSize);
        }
    }
}