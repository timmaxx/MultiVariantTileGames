Sokoban на Swing:
package com.javarush.task.task34.task3410.controller;


Для реализации классификации игры можно рассмотреть такой вариант:
На каждый из классификаторов создать по интерфейсу.
А на каждую из альтернатив по отдельной классификации сделать классы, реализующие этот интерфейс, но реализующим его в
  соответствии с вариантом классификации.
Каждая модель будет иметь по одной переменной каждого такого интерфейса, в которую будет записана переменная,
  реализующая определённый интерфейс в определённом варианте классификации.
Вот и не получится, что-бы модель, по отдельной классификации, удовлетворяла более чем одной версии классификации!


Пример реализации классов в Шахматах относительно ролей.
- Заметка для Шахмат: пешка может стать любой фигурой, кроме короля, а значит в иерархии классов будет:
-- Объект Шахмат:
--- Пешка
--- Фигуры:
---- Король
---- Фигуры, но не король:
----- Ладья,
----- Конь,
----- Слон,
----- Ферзь.


Последовательности при создании клиентов и сервера и при создании команд и событий

Последовательность при сборке сервера игры для контроллера:
1. ???

Последовательность при сборке клиента игры для контроллера:
1. вызываются:
1.1. initGameSceneController( baseModel) (по одному на каждую выборку - отвечает за реакцию от мыши).
1.2. initGameStackPaneController( baseModel) (один на всю сбоку - отвечает за нажатие клавиш).
   каждый из которых запоминает ссылку на модель и создаёт внутри себя очередь GameCommandQueueOfController.
   (в которую потом и будет писать команды).
   Т.е. у каждого контроллера своя очередь команд.
   Во время или до "запоминания ссылки на модель" нужно проводить идентификацию клиента на сервере
   и допускать клиента только к определённым играм и определённым ролям.

Последовательность при возникновении команды
1. Контроллер (в клиенте) создаёт команду
2. Команда записывается в очередь команд этого контроллера.
3. Транспорт:
3.1. Из очереди команд контролера вытаскивается команда
3.2. Команда передаётся в очередь команд модели
4. Модель вытаскивает команду из очереди команд
5. Исполняет команду.

Последовательность при возникновении регистрации выборки:
1. Во время или до "регистрации выборки в модели" нужно проводить идентификацию клиента на сервере
   и допускать клиента только к определённым играм и определённым ролям.
2. Сборка (клиент игры) вызывает в своей модели (удалённая модель) регистрацию выборки в модели.
3. Модель (удалённая модель) обращается к модели (реальная-серверная) с предложением регистрации выборки.
4. Серверная модель создаёт в карте выборка-очередь новую запись, где выборка должна быть сохранена вместе
   с информацией о соединении к выборке (локальное или WebSocket) и новую очередь.

Последовательность при возникновении события:
1. Серверная модель в цикле по всей карте выборка-очередь проходит и:
1.1. запихивает в каждую очередь (серверную) событие.
2. Серверная очередь, получив событие:
2.1. извлекает его из себя
2.2. направляет в клиентскую очередь выборки:
2.2.1. в карте выборка-очередь в выборке есть инфа о соединении с выборкой
3. Клиентская очередь, получив событие:
3.1. вызывает update, которое:
3.1.1. вытаскивает событие из своей удалённой очереди.
3.1.2. обновляет отрисовку выборки.


Роли подключающихся клиентов:
1. Админ. Видимо это отдельный клиент.
2. Игрок N.
3. Наблюдатель. Т.е. нет возможности взаимодействия с моделью - контроллеры не подключены к модели.
3.1. Полный наблюдатель. Тот, кто может видеть всё поле/поля и объекты игры, даже если они частично скрыты:
3.1.1. Либо это большинство игр с одним видимым для всех полем:
3.1.1.1. Шашки - наблюдатель (как и любой игрок) видит всё,
3.1.1.2. В игре есть скрытая информация (Судоку, Сапёр):
3.1.1.2.1. только полный наблюдатель видит всё поле сразу,
3.1.1.2.2. наблюдатель, но не полный - видит, только то, что видит игрок (из этой ветки вынести нужно).
3.1.2. либо он видит все персональные поля всё время - Морской бой).
3.2. Наблюдатель за игроком N (в случае, если поля у игроков отличаются, например Морской бой).


23.10.2023 ------------------------------------------------------------------------------------------------------------

Состояние клиентского ПО и что может клиентское ПО в этом состоянии:
В каждом из состояний клиентское ПО может быть:
- закрыто.
- возвращено на один или несколько предыдущих уровней состояния.

1. Запущен, подключения к серверу нет совсем.
1.1. Ввести адрес и порт сервера.
1.2. Создать не авторизованное соединение.
2. Подключение есть, но сервер не идентифицировал, не аутентифицировал и не авторизовал пользователя.
2.1. Ввести имя и пароль пользователя.
2.2. Инициировать авторизацию.
3. Сервер идентифицировал, аутентифицировал и авторизовал пользователя.
3.1. Запросить перечень доступных игр.
3.1.1. и получить перечень доступных игр этому пользователю и одновременно этому клиентскому ПО (Сапёр, Сокобан).
       Напомню, что для клиентского ПО в формате всё-в-одном доступны могут быть только игры с одним игроком.
       Каждая из игр идёт с формальным описанием по классификации.
       Например для Сапёр:
       - один игрок,
       - одно общее поле (в т.ч. и потому, что игрок один),
       - пошаговая,
       - объекты не двигаются,
       - новые объекты могут появиться на поле,
       - объекты могут сниматься в течении игры,
       - Может-ли поменяться роль объекта во время игры - нет,
       - По видимости всего общего поля или видимости полей оппонентов: открываются во время игры,
       - По наличию (псевдо)случайного фактора:
       -- есть фактор случайности:
       --- при первичной генерации поля (Сапёр),
       - По возможности откатить ход без раскрытия поля: нет.
3.2. Выбрать игру.
4. Игра (как тип игры) выбрана. (т.е., например, мы принципиально собираемся играть в Сокобан).
4.1. Запросить перечень серий партий, доступных для данного игрока для его подключения к ним как:
     - продолжающим играть ранее игранной партии ещё неоконченной, но сохранённой.
     - готовым подключиться как второй игрок к партии, кем-то открытой для конкретно этого игрока или публично открытой.
4.1.1. Получить перечень доступных партий.
4.2. Выбрать серию партий.
4.3. Начать новую серию партий.
     - если игра одиночная, то перейти к серии.
     - если для двух игроков, то:
4.3.1. указать перечень игроков, для которых открыта будет эта серия.
4.3.2. или указать, что игра публичная (открыта для неограниченного перечня игроков).
5. Выбрана серия партий (доигрываем ранее созданную или играем новую).
   Например для:
   - Сокобан:
   -- (после 4.1. -1) продолжим с 5-й карты, т.к. именно на ней этот игрок остановился в прошлый раз.
   -- (после 4.2. -1) начать с первой карты.
   -
5.1. Запросить перечень партий в серии, доступных для игры.
5.2. Выбрать партию.
6. Выбрана конкретная партия в серии из доступных.
6.1. Запросить перечень возможных сторон и ролей (игрок/наблюдатель), с которой можно подключиться игроку
     например для:
     - Для всех игр это по умолчанию первый и/или второй.
     -- Шашек подразумевается, какой цвет свободен: черный и/или белый).
6.2. Выбрать сторону и роль.
7. Выбрана сторона в партии.
7.1. Запросить готовность других игроков.
7.1. Заявить о готовности начать/продолжить.
7.1.1. Получить подтверждение, что сервер принял, но нет готовности от другого игрока.
7.1.2. Получить подтверждение, что сервер принял, и есть готовность от другого игрока.
       Игра должна начаться/продолжиться через N секунд.
8. Игра.
